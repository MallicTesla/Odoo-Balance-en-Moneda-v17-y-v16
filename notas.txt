para ejecutar el servidor
la primera parte ejecuta el entorno de python
    "C:/Program Files/Odoo 17.0.20241203/python/python.exe" 
la segunda ejecuta el binario de odo
    "C:/Program Files/Odoo 17.0.20241203/server/odoo-bin"
la tercera parte es la base de datos
    -d odoo17
con -i base se crea a base de datos sesde 0
    -i base

"C:/Program Files/Odoo 17.0.20241203/python/python.exe" "C:/Program Files/Odoo 17.0.20241203/server/odoo-bin" -d odoo17 -i base
"C:/Program Files/Odoo 16.0.20241217/python/python.exe" "C:/Program Files/Odoo 16.0.20241217/server/odoo-bin" -d odoo16 -i base

para activar al modo desarrollador
"C:/Program Files/Odoo 17.0.20241203/python/python.exe" "C:/Program Files/Odoo 17.0.20241203/server/odoo-bin" -u all -d odoo17
"C:/Program Files/Odoo 16.0.20241217/python/python.exe" "C:/Program Files/Odoo 16.0.20241217/server/odoo-bin" -u all -d odoo16

para crear un modulo
"C:/Program Files/Odoo 17.0.20241203/python/python.exe"  "C:/Program Files/Odoo 17.0.20241203/server/odoo-bin" scaffold balance_moneda /ruta/a/tu/repositorio

activa la terminal de pawer shel
odoo-bin shell -d nombre_de_tu_base_de_datos

muestra todos los campos de un modulo
env['aca va el modulo']._fields.keys()
env['account.move.line']._fields.keys()




Pillow==9.0.1 ; python_version <= '3.10'
Pillow==9.4.0 ; python_version > '3.10' and python_version < '3.12'
Pillow==10.2.0 ; python_version >= '3.12'  # (Noble) Mostly to have a wheel package
rl-renderPM==4.0.3 ; sys_platform == 'win32' and python_version >= '3.12'  # Needed by reportlab 4.1.0 but included in deb package
psycopg2==2.9.2 ; python_version == '3.10' # (Jammy)
psycopg2==2.9.5 ; python_version == '3.11'
psycopg2==2.9.9 ; python_version >= '3.12' # (Noble) Mostly to have a wheel package
lxml==4.8.0 ; python_version <= '3.10'
lxml==4.9.3 ; python_version > '3.10' and python_version < '3.12' # min 4.9.2, pinning 4.9.3 because of missing wheels for darwin in 4.9.3
lxml==5.2.1; python_version >= '3.12' # (Noble - removed html clean)

>>> env['account.move.line']._fields.keys()
dict_keys(['analytic_distribution', 'analytic_distribution_search', 'analytic_precision', 'move_id', 'journal_id', 'company_id', 'company_currency_id', 'move_name', 'parent_state', 'date', 'invoice_date', 'ref', 'is_storno', 'sequence', 'move_type', 'account_id', 'name', 'debit', 'credit', 'balance', 'cumulated_balance', 'currency_rate', 'amount_currency', 'currency_id', 'is_same_currency', 'partner_id', 'reconcile_model_id', 'payment_id', 'statement_line_id', 'statement_id', 'tax_ids', 'group_tax_id', 'tax_line_id', 'tax_group_id', 'tax_base_amount', 'tax_repartition_line_id', 'tax_tag_ids', 'tax_tag_invert', 'amount_residual', 'amount_residual_currency', 'reconciled', 'full_reconcile_id', 'matched_debit_ids', 'matched_credit_ids', 'matching_number', 'is_account_reconcile', 'account_type', 'account_internal_group', 'account_root_id', 'display_type', 'product_id', 'product_uom_id', 'product_uom_category_id', 'quantity', 'date_maturity', 'price_unit', 'price_subtotal', 'price_total', 'discount', 'tax_calculation_rounding_method', 'term_key', 'tax_key', 'compute_all_tax', 'compute_all_tax_dirty', 'epd_key', 'epd_needed', 'epd_dirty', 'discount_allocation_key', 'discount_allocation_needed', 'discount_allocation_dirty', 'analytic_line_ids', 'discount_date', 'discount_amount_currency', 'discount_balance', 'payment_date', 'blocked', 'is_refund', 'id', 'display_name', 'create_uid', 'create_date', 'write_uid', 'write_date'])
>>>